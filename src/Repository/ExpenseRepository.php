<?php

namespace App\Repository;

use App\Entity\ExpenseEntity;

/**
 * ExpenseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpenseRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($expense_form) {

        $errors = array();

        $action = $expense_form['action'];

        // d = delete
        if($action !== 'd') {
            
            if(empty($expense_form['amount'])) {
                $errors[] = 'Amount should not be blank.';
            }

            if(empty($expense_form['expenseType'])) {
                $errors[] = 'Expense Type should not be blank.';
            }

            if(empty($expense_form['description'])) {
                $errors[] = 'Description should not be blank.';
            }

            if(empty($expense_form['expenseDate'])) {
                $errors[] = 'Expense Date should not be blank.';
            }
        }

        return $errors;
    }

    public function ajax_list(array $get, $userData){

        $columns = array(
            array('et.`description`', 'et.`description`', 'expenseType'),
            array('e.`description`', "e.`description`", "description"),
            array('e.`amount`', "e.`amount`", 'amount'),
            array('DATE_FORMAT(e.`expense_date`, "%Y/%m/%d")', 'DATE_FORMAT(e.`expense_date`, "%Y/%m/%d")', "expenseDate"),
            array('e.`id`', "e.`id`")
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `expense` e";
        $sqlWhere = " WHERE e.`is_deleted` = 0";
        $joins = " LEFT JOIN `expense_type` et ON et.`id` = e.`expense_type_id`";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= " AND e.`branch_id` = :branchId";
            $stmtParams['branchId'] = base64_decode($userData['branchId']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasUpdate = false;
        $hasDetails = false;
        if($userData['type'] == 'Super Admin'  || in_array('Expense Update', $userData['accesses'])){
            $hasUpdate = true;
        }



        foreach($result as $row) {

            $id = base64_encode($row['id']);

            $action = $hasUpdate ? "<a class='action-button-style btn btn-primary  href-modal' href='javascript:void(0)' data-id='".$id."' data-action='u'>Update</a>" : "";

            $values = array(
                $row['expenseType'],
                $row['description'],
                $row['amount'],
                $row['expenseDate'],
                $action
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function income_report($dateFrom, $dateTo, $purok, $userData){
       
        $stmtParams = array();
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){
             $stmtParams['branchId'] = base64_decode($userData['branchId']);   
        }

       if($dateFrom != 'NULL' && $dateTo != 'NULL'){
            $andWhere .= ' AND e.`expense_date` BETWEEN "' . date('Y-m-d', strtotime(str_replace('-', '/', $dateFrom))) . ' 00:00:00" AND "' .  date('Y-m-d', strtotime(str_replace('-', '/', $dateTo))) . ' 23:59:59"';   
       } else if( $dateFrom != 'NULL'){
            $andWhere .= ' AND e.`expense_date` >= "' . date('Y-m-d', strtotime(str_replace('-', '/', $dateFrom))) . ' 00:00:00"';
       } else if($dateTo != 'NULL') {
            $andWhere .= ' AND e.`expense_date` <= "' .   date('Y-m-d', strtotime(str_replace('-', '/', $dateTo))) . ' 23:59:59"';
       }

        $query = $this->getEntityManager()->getConnection()->prepare("
                SELECT 
                
                    et.`description` AS expenseType,
                    e.`description`,
                    e.`amount`,
                    DATE_FORMAT(e.`expense_date`, '%m/%d/%Y') AS expenseDate
                FROM `expense` e 
                LEFT JOIN `expense_type` et ON et.`id` = e.`expense_type_id`
                LEFT JOIN `branch` b ON b.`id` = e.`branch_id`
                LEFT JOIN `company` co ON co.`id` = b.`company_id`   
                AND e.`branch_id` = :branchId 
                AND e.`is_deleted` = 0
                ".$andWhere."
                ORDER BY e.`expense_date` asc
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;

    }

       
}
