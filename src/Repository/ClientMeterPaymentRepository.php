<?php

namespace App\Repository;

use App\Entity\ClientMeterPaymentEntity;

/**
 * ClientMeterPaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientMeterPaymentRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($clientMeterPayment_form) {

        $errors = array();

        $action = $clientMeterPayment_form['action'];

        $paymentDate = $clientMeterPayment_form['paymentDate'];

        // d = delete
        if($action !== 'd') {
            $transactionNoExist = $this->getEntityManager()->getRepository(ClientMeterPaymentEntity::class)
            ->createQueryBuilder('cmp')
            ->where('cmp.id !=  :id')
            ->andWhere('cmp.transactionNo =:transactionNo')
            ->setParameters(array(
                'transactionNo' => $clientMeterPayment_form['transactionNo'],
                'id' => $clientMeterPayment_form['id']
            ))
            ->getQuery()->getResult();

            if($transactionNoExist) {
                $errors[] = 'Transaction already in used.';
            }
            if(empty($clientMeterPayment_form['payment_type_desc'])) {
                $errors[] = 'Payment type is required';
            }

            if(empty($clientMeterPayment_form['paymentDate'])) {
                $errors[] = 'Payment date is required';
            }

            if(empty($clientMeterPayment_form['amount'])) {
                $errors[] = 'Amount is required';
            }

            if($clientMeterPayment_form['amount'] > $clientMeterPayment_form['amount_tendered']) {
                $errors[] = 'Amount must be less than or equal to tendered amount.';
            }
            
        }

        return $errors;
    }

    public function ajax_list(array $get, $userData){

        $columns = array(
            array('cmp.`id`', "cmp.`id`"),
            array('cmp.`transaction_no`', 'cmp.`transaction_no`', 'transactionNo'),
            array('cmp.`amount`', 'cmp.`amount`', 'amount'),
            array('pt.`description`', 'pt.`description`', 'paymentType'),
            array('cmp.`ref_no`', 'cmp.`ref_no`', 'refNo'),
            array('DATE_FORMAT(cmp.`payment_date`,"%m/%d/%Y")','DATE_FORMAT(cmp.`payment_date`,"%m/%d/%Y")', 'paymentDate'),
            array('cmp.`id`', "cmp.`id`")
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `client_meter_payment` cmp";
        $sqlWhere = " WHERE cmp.`is_deleted` = 0";
        $joins = " LEFT JOIN `payment_type` pt ON pt.`id` = cmp.`payment_type_id`";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $get['clientMeterId']){

            $sqlWhere .= " AND cmp.`client_meter_id` = :clientMeterId";
            $stmtParams['clientMeterId'] = base64_decode($get['clientMeterId']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $printReceiptUrl = 'client_meter_payment/print/receipt/';
        $hasUpdate = false;
        $hasDetails = false;
        $hasPrintReceipt = false;

        
        if($userData['type'] == 'Super Admin'  || in_array('Client Details Meter Details Payment Update', $userData['accesses'])){
            $hasUpdate = true;
        }

        if($userData['type'] == 'Super Admin'  || in_array('Client Details Meter Details Payment Print Receipt', $userData['accesses'])){
            $hasPrintReceipt = true;
        }

        foreach($result as $k => $row) {
            $id = base64_encode($row['id']);
            $action = $hasUpdate ? " <a class='action-button-style btn btn-primary  href-modal' href='javascript:void(0)' data-id='".$id."' data-action='u' data-type='payment'>Update</a>" : "";
            $action .= $hasPrintReceipt ? " <a class='action-button-style btn btn-primary  href-modal' href='".$url.$printReceiptUrl.$id."' target='_blank'>Print Receipt</a>" : "";
            
            $values = array(
                $row['transactionNo'],
                $row['amount'],
                $row['paymentType'],
                $row['refNo'],
                $row['paymentDate'],
                $action 
                
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    

    public function getNextTransactionNo(array $userData){
       
        $result =[];
        $dateToday = date('Y-m-d');

        $stmtParams =[];
        $andWhere = " WHERE cmp.`updated_at` BETWEEN '" . $dateToday . " 00:00:00' AND '". $dateToday ." 23:59:59'";
       
        if($userData['type'] != 'Super Admin'){

            $andWhere.= ' AND c.branch_id = :branchId'; 
            $stmtParams['branchId'] = base64_decode($userData['branchId']);   
        }
      
        $query = $this->getEntityManager()->getConnection()->prepare("
                SELECT 
                    count(cmp.`id`) as transactionCtr
                FROM `client_meter_payment` cmp
                LEFT JOIN `client_meter` cm ON cm.`id` = cmp.`client_meter_id`
                LEFT JOIN `client` c ON c.`id` = cm.`client_id` 
                 ".$andWhere."
        ");

 

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return date('mdY') . str_pad(($result && $result[0] && $result[0]['transactionCtr'] ? ($result[0]['transactionCtr'] + 1) : 1) , 5, '0', STR_PAD_LEFT);
    }

    public function income_report($dateFrom, $dateTo, $purok, $userData){
       
        $stmtParams = array();
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){
             $stmtParams['branchId'] = base64_decode($userData['branchId']);   
        }

        if($purok && $purok != 'Y'){
            $andWhere .= ' AND p.id = :purokId';
            $stmtParams['purokId'] = base64_decode($purok);  
       }

       if($dateFrom != 'NULL' && $dateTo != 'NULL'){
            $andWhere .= ' AND cmp.`payment_date` BETWEEN "' . date('Y-m-d', strtotime(str_replace('-', '/', $dateFrom))) . ' 00:00:00" AND "' .  date('Y-m-d', strtotime(str_replace('-', '/', $dateTo))) . ' 23:59:59"';   
       } else if( $dateFrom != 'NULL'){
            $andWhere .= ' AND cmp.`payment_date` >= "' . date('Y-m-d', strtotime(str_replace('-', '/', $dateFrom))) . ' 00:00:00"';
       } else if($dateTo != 'NULL') {
            $andWhere .= ' AND cmp.`payment_date` <= "' .   date('Y-m-d', strtotime(str_replace('-', '/', $dateTo))) . ' 23:59:59"';
       }

        $query = $this->getEntityManager()->getConnection()->prepare("
                SELECT 
                
                    CONCAT(c.`first_name`, ' ', c.`last_name`) AS fullName,
                    pt.`description` AS paymentType,
                    cmp.`ref_no` AS refNo,
                    cmp.`amount` AS amount,
                    DATE_FORMAT(cmp.`payment_date`, '%m/%d/%Y') AS paymentDate
                FROM `client_meter_payment` cmp 
                LEFT JOIN `payment_type` pt ON pt.`id` = cmp.`payment_type_id`
                LEFT JOIN `client_meter` cm ON cm.`id` = cmp.`client_meter_id` 
                LEFT JOIN `client` c ON c.`id` = cm.`client_id` 
                LEFT JOIN `purok` p ON p.`id` = cm.`purok_id` 
                LEFT JOIN `branch` b ON b.`id` = c.`branch_id`
                LEFT JOIN `company` co ON co.`id` = b.`company_id`   
                WHERE cmp.`is_deleted` = 0 
                AND c.`branch_id` = :branchId 
                AND c.`is_deleted` = 0
                ".$andWhere."
                ORDER BY cmp.`payment_date` asc
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;

    }


   
}
