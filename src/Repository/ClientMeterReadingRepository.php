<?php

namespace App\Repository;

use App\Entity\ClientMeterReadingEntity;

/**
 * ClientMeterReadingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientMeterReadingRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($clientMeterReading_form) {

        $errors = array();

        $action = $clientMeterReading_form['action'];

        $readingDate = $clientMeterReading_form['readingDate'];

        // d = delete
        if($action !== 'd') {
            $clientMeterReadingExist = $this->getEntityManager()->getRepository(ClientMeterReadingEntity::class)
                ->createQueryBuilder('cmr')
                ->where('cmr.id !=  :id')
                ->andWhere('cmr.isDeleted =  0')
                ->andWhere('cmr.clientMeter = :clientMeterId')
                ->andWhere('cmr.readingDate BETWEEN :startDate AND :endDate')
                ->setParameters(array(
                    'clientMeterId' => base64_decode($clientMeterReading_form['clientMeter']),
                    'startDate' => date("Y-m-01",strtotime($clientMeterReading_form['readingDate'])) . ' 00:00:00',
                    'endDate' => date("Y-m-t",strtotime($clientMeterReading_form['readingDate'])) . ' 23:59:59',
                    'id' => $clientMeterReading_form['id']
                ))
                ->getQuery()->getResult();

            if($clientMeterReadingExist) {
                $errors[] = 'Meter already has a reading this month.';
            }

            if($clientMeterReading_form['previousReading'] > $clientMeterReading_form['presentReading'] ) {
                $errors[] = 'Invalid reading.';
            }
            
        }

        return $errors;
    }

    public function ajax_list(array $get, $userData){

        $columns = array(
            array('cmr.`id`', "cmr.`id`"),
            array('cmr.`previous_reading`', 'cmr.`previous_reading`', 'previousReading'),
            array('cmr.`present_reading`', 'cmr.`present_reading`', 'presentReading'),
            array('cmr.`status`', 'cmr.`status`', 'status'),
            array('cmr.`consume`', 'cmr.`consume`', 'consume'),
            array('cmr.`billed_amount`', 'cmr.`billed_amount`', 'billedAmount'),
            array('DATE_FORMAT(cmr.`reading_date`,"%m/%d/%Y")', 'DATE_FORMAT(cmr.`reading_date`,"%m/%d/%Y")', 'readingDate'),
            array('DATE_FORMAT(cmr.`due_date`,"%m/%d/%Y")','DATE_FORMAT(cmr.`due_date`,"%m/%d/%Y")', 'dueDate'),
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `client_meter_reading` cmr";
        $sqlWhere = " WHERE cmr.`is_deleted` = 0";
        $joins = "";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $get['clientMeterId']){

            $sqlWhere .= " AND cmr.`client_meter_id` = :clientMeterId";
            $stmtParams['clientMeterId'] = base64_decode($get['clientMeterId']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $printUrl = 'client_meter/print/temporary_receipt/';
        $hasUpdate = false;
        $hasPrint = false;
        $hasDetails = false;

        
        if($userData['type'] == 'Super Admin'  || in_array('Client Details Meter Details Reading Update', $userData['accesses'])){
            $hasUpdate = true;
        }

        if($userData['type'] == 'Super Admin'  || in_array('Client Details Meter Details Reading Print', $userData['accesses'])){
            $hasPrint = true;
        }

        $action = '';


        foreach($result as $k => $row) {
            $id = base64_encode($row['id']);
         
            $action .= $hasUpdate ? "<a class='action-button-style btn btn-primary  href-modal' href='javascript:void(0)' data-id='".$id."' data-action='u' data-type='reading'>Update</a>" : "";
            $action .= $hasPrint ? " <a class='action-button-style btn btn-primary'  href='".$url.$printUrl.$id."' target='_blank'>Download</a>" : "";
            $values = array(
                $row['previousReading'],
                $row['presentReading'],
                $row['status'],
                $row['consume'],
                $row['billedAmount'],
                $row['readingDate'],
                $row['dueDate'],
                $k === array_key_first($result) ? $action : ''
                
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function autocompleteSuggestions($q, $userData) {

        $stmtParams = array(
            'q' => "%" . $q['query'] . "%"
        );
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE u.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        
        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                u.`id`,
                CONCAT(u.`first_name`, ' ', u.`last_name`) AS data,
                CONCAT(u.`first_name`, ' ', u.`last_name`) AS value
            FROM `client` u
            $andWhere
            AND u.`is_deleted` != 1
            AND CONCAT(u.`first_name`, ' ', u.`last_name`) LIKE :q
            ORDER BY u.`first_name`
            LIMIT 0,20
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

   public function consumption_ajax_list($get, $userData){
        
        $columns = array(
            array('CONCAT(c.`first_name`, " ", c.`last_name`, " - ", cm.`meter_serial_no`)', 'CONCAT(c.`first_name`, " ", c.`last_name`, " - ", cm.`meter_serial_no`)', "meter"),
            array('p.`description`', 'p.`description`', 'purok'),
            array('cmr.`billed_amount`', 'cmr.`billed_amount`', 'billedAmount'),
            array('cmr.`consume`', 'cmr.`consume`', 'consume'),
        );

        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `client_meter_reading` cmr";
        $sqlWhere = " WHERE cmr.`is_deleted` = 0";
        $joins = " LEFT JOIN `client_meter` cm ON cm.`id` = cmr.`client_meter_id`";
        $joins .= " LEFT JOIN `client` c ON c.`id` = cm.`client_id`";
        $joins .= " LEFT JOIN `purok` p ON p.`id` = cm.`purok_id`";

        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        if($userData['type'] != 'Super Admin'){

            $sqlWhere.= ' AND c.branch_id = :branchId'; 
            $stmtParams['branchId'] = base64_decode($userData['branchId']);   
       }

        if($get['date']){
            $sqlWhere.= ' AND cmr.`reading_date` BETWEEN "' .date("Y-m-01",strtotime($get['date'])) . ' 00:00:00" AND "'.date("Y-m-t",strtotime($get['date'])) . ' 23:59:59"';    
        }

        if($get['purok'] && $get['purok'] != 'All' ){
            $sqlWhere.= ' AND p.`id` =:purok';
            $stmtParams['purok'] = base64_decode($get['purok']);   

        }

        /*
        * Ordering
        */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
        * Filtering
        */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";

        $query = $this->getEntityManager()->getConnection()->prepare($sql);
    

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
        * Output
        */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );


        foreach($result as $k => $row) {
            $values = array(
                $row['meter'],
                $row['purok'],
                $row['billedAmount'],

                $row['consume'],
                
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
   }

   public function consumptionData($date, $purok, $userData){
   

        $stmtParams = array();
        $sqlWhere = '';

        if($userData['type'] != 'Super Admin'){

             $stmtParams['branchId'] = base64_decode($userData['branchId']);   
        }

        if($date){
            $sqlWhere.= ' AND cmr.`reading_date` BETWEEN "' .date("Y-m-01",strtotime(str_replace('-', '/', $date))) . ' 00:00:00" AND "'.date("Y-m-t",strtotime(str_replace('-', '/', $date))) . ' 23:59:59"';    
        }
        if($purok &&  $purok != 'Y' ){
            $sqlWhere.= ' AND p.`id` = :purok';
            $stmtParams['purok'] = $purok;   
        }

        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT 
                CONCAT(c.`first_name`, ' ', c.`last_name`, ' - ', cm.`meter_serial_no`) AS meter,
                p.`description` AS purok,
                cmr.`billed_amount` AS billedAmount,
                cmr.`consume` AS consume
            FROM `client_meter_reading` cmr
            LEFT JOIN `client_meter` cm ON cm.`id` = cmr.`client_meter_id` 
            LEFT JOIN `client` c ON c.`id` = cm.`client_id` 
            LEFT JOIN `purok` p ON p.`id` = cm.`purok_id` 
            WHERE cmr.`is_deleted` = 0 
            AND c.branch_id = :branchId 
            $sqlWhere 
            ORDER BY p.`description` ASC
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
   }

   public function get_pending_payment(){

        $query = $this->getEntityManager()->getConnection()->prepare("
                SELECT 
                    CONCAT(c.`first_name`, ' ', c.`last_name`) AS fullName,
                    b.`id` AS branchId,
                    cm.`meter_serial_no` AS serialNo,
                    cmr.previousReading AS previousReading,
                    cmr.presentReading AS presentReading,
                    cmr.consume AS consume, 
                    DATE_FORMAT(cmr.readingDate, '%m/%d/%Y') AS readingDate,
                    DATE_FORMAT(cmr.dueDate, '%m/%d/%Y') AS dueDate,
                    cm.`remaining_balance` AS remainingBalance,
                    cmr.billedAmt AS billedAmount,
                    (cm.`remaining_balance` +  cmr.billedAmt ) AS totalBalance,
                    cmr.amountPerCubic AS amountPerCubic,
                    cm.`id`,
                    co.`description` AS company,
                    co.`id` AS companyId,
                    co.`address` AS companyAddress,
                    p.`description` AS purok,
                    c.`contact_no` AS contactNo,
                    DATE_FORMAT(cmc.firstPendingPayment, '%m/%d/%Y') AS firstPendingPayment  
                FROM `client_meter` cm 
                LEFT JOIN `client` c ON c.`id` = cm.`client_id` 
                LEFT JOIN `purok` p ON p.`id` = cm.`purok_id` 
                LEFT JOIN `branch` b ON b.`id` = c.`branch_id`
                LEFT JOIN `company` co ON co.`id` = b.`company_id` 
                LEFT JOIN ( 
                    SELECT 
                        cmr.`status` AS status,
                        cmr.`previous_reading` AS previousReading,
                        cmr.`present_reading` AS presentReading,
                        cmr.`consume` AS consume,
                        cmr.`reading_date` AS readingDate,
                        cmr.`due_date` AS dueDate,
                        cmr.`billed_amount` AS billedAmt,
                        cmr.`amount_per_cubic` AS amountPerCubic,
                        cmr.`id` AS cmrId, cmr.`client_meter_id` AS clientMeterId 
                    FROM `client_meter_reading` cmr 
                    WHERE cmr.`status` = 'Pending Payment' 
                    AND cmr.`reading_date` IN ( 
                        SELECT 
                            MAX(reading_date) 
                            FROM `client_meter_reading` s 
                        WHERE s.`status` = 'Pending Payment' 
                        AND s.`is_deleted` = 0 
                        GROUP BY s.`client_meter_id` ) 
                    AND cmr.`is_deleted` = 0 
                    GROUP BY cmr.`client_meter_id` ) cmr ON cm.`id` = cmr.clientMeterId 
                LEFT JOIN ( 
                    SELECT 
                        cmc.`due_date` AS firstPendingPayment,
                        cmc.`client_meter_id` AS cclientMeterId 
                    FROM `client_meter_reading` cmc 
                    WHERE cmc.`status` = 'Pending Payment' 
                    AND cmc.`reading_date` IN ( 
                        SELECT 
                            MIN(reading_date) 
                            FROM `client_meter_reading` s 
                        WHERE s.`status` = 'Pending Payment' 
                        AND s.`is_deleted` = 0 
                        GROUP BY s.`client_meter_id` ) 
                    AND cmc.`is_deleted` = 0 
                    GROUP BY cmc.`client_meter_id` ) cmc ON cm.`id` = cmc.cclientMeterId   
                WHERE cm.`is_deleted` = 0 
                AND cm.`status` = 'Active' 
                AND cmr.cmrId IS NOT NULL 
                AND c.`is_deleted` = 0
                AND  cmr.dueDate <= DATE(NOW() - INTERVAL 3 DAY) 

            
        ");
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;

    }
    

   
}
